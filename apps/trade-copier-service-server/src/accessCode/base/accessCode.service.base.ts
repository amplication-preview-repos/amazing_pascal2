/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccessCode as PrismaAccessCode,
  User as PrismaUser,
} from "@prisma/client";

export class AccessCodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessCodeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessCode.count(args);
  }

  async accessCodes(
    args: Prisma.AccessCodeFindManyArgs
  ): Promise<PrismaAccessCode[]> {
    return this.prisma.accessCode.findMany(args);
  }
  async accessCode(
    args: Prisma.AccessCodeFindUniqueArgs
  ): Promise<PrismaAccessCode | null> {
    return this.prisma.accessCode.findUnique(args);
  }
  async createAccessCode(
    args: Prisma.AccessCodeCreateArgs
  ): Promise<PrismaAccessCode> {
    return this.prisma.accessCode.create(args);
  }
  async updateAccessCode(
    args: Prisma.AccessCodeUpdateArgs
  ): Promise<PrismaAccessCode> {
    return this.prisma.accessCode.update(args);
  }
  async deleteAccessCode(
    args: Prisma.AccessCodeDeleteArgs
  ): Promise<PrismaAccessCode> {
    return this.prisma.accessCode.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.accessCode
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
